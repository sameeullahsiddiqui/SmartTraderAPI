// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartTrader.Infrastructure.EFStructures;

namespace SmartTrader.Infrastructure.Migrations
{
    [DbContext(typeof(SmartTraderContext))]
    [Migration("20210624141941_earningv2")]
    partial class earningv2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SmartTrader.Core.Models.BackgroundJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextExecution")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppBackgroundJobs");
                });

            modelBuilder.Entity("SmartTrader.Core.Models.Delivery", b =>
                {
                    b.Property<decimal>("AvgVolume_30")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DelRatio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeliveryQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instrument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Last")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Monthly")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SymbolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalTradedQty")
                        .HasColumnType("int");

                    b.Property<decimal>("VolRatio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Weekly")
                        .HasColumnType("decimal(18,2)");

                    b.ToView("Delivery");
                });

            modelBuilder.Entity("SmartTrader.Core.Models.EarningReport", b =>
                {
                    b.Property<int>("EarningReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ChangeSinceReport")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Company")
                        .HasColumnType("Varchar(500)");

                    b.Property<string>("CurrentQuarter")
                        .HasColumnType("Varchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EarningDayPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Q1Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Q2Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Q3Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Q4Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("QoQGrossProfit_Q1")
                        .HasColumnType("float");

                    b.Property<double>("QoQGrossProfit_Q2")
                        .HasColumnType("float");

                    b.Property<double>("QoQGrossProfit_Q3")
                        .HasColumnType("float");

                    b.Property<double>("QoQGrossProfit_Q4")
                        .HasColumnType("float");

                    b.Property<double>("QoQNetProfit_Q1")
                        .HasColumnType("float");

                    b.Property<double>("QoQNetProfit_Q2")
                        .HasColumnType("float");

                    b.Property<double>("QoQNetProfit_Q3")
                        .HasColumnType("float");

                    b.Property<double>("QoQNetProfit_Q4")
                        .HasColumnType("float");

                    b.Property<double>("QoQSales_Q1")
                        .HasColumnType("float");

                    b.Property<double>("QoQSales_Q2")
                        .HasColumnType("float");

                    b.Property<double>("QoQSales_Q3")
                        .HasColumnType("float");

                    b.Property<double>("QoQSales_Q4")
                        .HasColumnType("float");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<double>("YoYGrossProfit_Q1")
                        .HasColumnType("float");

                    b.Property<double>("YoYGrossProfit_Q2")
                        .HasColumnType("float");

                    b.Property<double>("YoYGrossProfit_Q3")
                        .HasColumnType("float");

                    b.Property<double>("YoYGrossProfit_Q4")
                        .HasColumnType("float");

                    b.Property<double>("YoYNetProfit_Q1")
                        .HasColumnType("float");

                    b.Property<double>("YoYNetProfit_Q2")
                        .HasColumnType("float");

                    b.Property<double>("YoYNetProfit_Q3")
                        .HasColumnType("float");

                    b.Property<double>("YoYNetProfit_Q4")
                        .HasColumnType("float");

                    b.Property<double>("YoYSales_Q1")
                        .HasColumnType("float");

                    b.Property<double>("YoYSales_Q2")
                        .HasColumnType("float");

                    b.Property<double>("YoYSales_Q3")
                        .HasColumnType("float");

                    b.Property<double>("YoYSales_Q4")
                        .HasColumnType("float");

                    b.HasKey("EarningReportId");

                    b.ToTable("AppEarningReports");
                });

            modelBuilder.Entity("SmartTrader.Core.Models.FileCategory", b =>
                {
                    b.Property<int>("FileCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUniqueFile")
                        .HasColumnType("bit");

                    b.Property<string>("TargetPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FileCategoryId");

                    b.ToTable("AppFileCategories");
                });

            modelBuilder.Entity("SmartTrader.Core.Models.IndustryView", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gain")
                        .HasColumnType("int");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Loss")
                        .HasColumnType("int");

                    b.Property<int>("Nutral")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.ToView("IndustryView");
                });

            modelBuilder.Entity("SmartTrader.Core.Models.Portfolio", b =>
                {
                    b.Property<Guid>("PortfolioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AllowedRiskOnBuyDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BreakEvenPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BuyClose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BuyComment")
                        .HasColumnType("nVarchar(500)");

                    b.Property<decimal?>("BuyCommission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("BuyDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("BuyDayReturn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("BuyExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("BuyGrade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BuyHigh")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BuyLow")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BuyOpen")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BuyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CurrentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CurrentProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("HoldingProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PortfolioName")
                        .HasColumnType("nVarchar(100)");

                    b.Property<decimal?>("ProfitPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("SellClose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SellComment")
                        .HasColumnType("nVarchar(500)");

                    b.Property<decimal?>("SellCommission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("SellDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("SellDayReturn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("SellExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("SellGrade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SellHigh")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SellLow")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SellOpen")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SellPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("nVarchar(100)");

                    b.Property<decimal?>("StopLossPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SymbolName")
                        .HasColumnType("nVarchar(500)");

                    b.Property<decimal?>("TargetPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TradeDays")
                        .HasColumnType("int");

                    b.Property<decimal?>("TradeGrade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TradeType")
                        .HasColumnType("nVarchar(100)");

                    b.HasKey("PortfolioId");

                    b.ToTable("AppPortfolios");
                });

            modelBuilder.Entity("SmartTrader.Core.Models.SectorAnalysis", b =>
                {
                    b.Property<int>("SectorAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Day0Color")
                        .HasColumnType("nVarchar(10)");

                    b.Property<string>("Day1Color")
                        .HasColumnType("nVarchar(10)");

                    b.Property<int?>("Day1Gainer")
                        .HasColumnType("int");

                    b.Property<string>("Day2Color")
                        .HasColumnType("nVarchar(10)");

                    b.Property<int?>("Day2Gainer")
                        .HasColumnType("int");

                    b.Property<string>("Day3Color")
                        .HasColumnType("nVarchar(10)");

                    b.Property<int?>("Day3Gainer")
                        .HasColumnType("int");

                    b.Property<string>("Day4Color")
                        .HasColumnType("nVarchar(10)");

                    b.Property<int?>("Day4Gainer")
                        .HasColumnType("int");

                    b.Property<string>("Day5Color")
                        .HasColumnType("nVarchar(10)");

                    b.Property<int?>("Day5Gainer")
                        .HasColumnType("int");

                    b.Property<double>("GainerRatio")
                        .HasColumnType("float");

                    b.Property<int>("Gainers")
                        .HasColumnType("int");

                    b.Property<int>("Loser")
                        .HasColumnType("int");

                    b.Property<int>("Nutral")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Sector")
                        .HasMaxLength(100)
                        .HasColumnType("nVarchar(100)");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("SectorAnalysisId");

                    b.ToTable("SectorAnalysis");
                });

            modelBuilder.Entity("SmartTrader.Core.Models.SectorStockView", b =>
                {
                    b.Property<decimal>("AvgVolume_30")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MarketCap")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Monthly")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sector")
                        .HasColumnType("Varchar(500)");

                    b.Property<int>("TotalTradedQty")
                        .HasColumnType("int");

                    b.Property<decimal>("Weekly")
                        .HasColumnType("decimal(18,2)");

                    b.ToView("SectorStockView");
                });

            modelBuilder.Entity("SmartTrader.Core.Models.ShortlistedStock", b =>
                {
                    b.Property<int>("ShortlistedStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DelRatio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Monthly")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ShortlistDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StrategyName")
                        .HasColumnType("Varchar(500)");

                    b.Property<string>("SymbolName")
                        .HasColumnType("Varchar(500)");

                    b.Property<decimal>("Weekly")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ShortlistedStockId");

                    b.ToTable("ShortlistedStock");
                });

            modelBuilder.Entity("SmartTrader.Core.Models.StockPrice", b =>
                {
                    b.Property<Guid>("StockPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AvgDelivery_30")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AvgVolume_30")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DelRatio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeliveryQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("High")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsFlaged")
                        .HasColumnType("bit");

                    b.Property<decimal>("Last")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Low")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Monthly")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Monthly_3")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Monthly_6")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Monthly_9")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Open")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrevClose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Q1High")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Q1Low")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Q2High")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Q2Low")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Q3High")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Q3Low")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Q4High")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Q4Low")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Series")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SymbolId")
                        .HasColumnType("int");

                    b.Property<string>("SymbolName")
                        .HasColumnType("Varchar(500)");

                    b.Property<string>("Tooltip")
                        .HasMaxLength(1000)
                        .HasColumnType("nVarchar(1000)");

                    b.Property<int>("TotalTradedQty")
                        .HasColumnType("int");

                    b.Property<decimal>("VolRatio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Weekly")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Yearly")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StockPriceId");

                    b.HasIndex("SymbolId");

                    b.ToTable("AppStockPrices");
                });

            modelBuilder.Entity("SmartTrader.Core.Models.SuperstarPortfolio", b =>
                {
                    b.Property<int>("SuperstarPortfolioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ChangeSinceAdded")
                        .HasColumnType("float");

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<string>("InvestorName")
                        .HasColumnType("Varchar(500)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ReasonToWatch")
                        .HasColumnType("Varchar(1000)");

                    b.Property<string>("Status")
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("Symbol")
                        .HasColumnType("Varchar(500)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("SuperstarPortfolioId");

                    b.ToTable("SuperstarPortfolio");
                });

            modelBuilder.Entity("SmartTrader.Core.Models.Symbol", b =>
                {
                    b.Property<int>("SymbolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CashByMarketCap")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CashEndOfLastYear")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Debt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float>("Facevalue")
                        .HasColumnType("real");

                    b.Property<bool?>("Flag")
                        .HasColumnType("bit");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instrument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("InstrumentToken")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Interest")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IntradaySelected")
                        .HasColumnType("bit");

                    b.Property<string>("Isin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Margin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarketCap")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NetProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Sales")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Ticker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAssets")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TradeReceivables")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("isNifty100")
                        .HasColumnType("bit");

                    b.Property<bool?>("isNifty200")
                        .HasColumnType("bit");

                    b.Property<bool?>("isNifty50")
                        .HasColumnType("bit");

                    b.Property<bool?>("isNiftyNext50")
                        .HasColumnType("bit");

                    b.Property<bool>("isShariaComplience")
                        .HasColumnType("bit");

                    b.HasKey("SymbolId");

                    b.ToTable("AppSymbols");
                });

            modelBuilder.Entity("SmartTrader.Core.Models.Trade", b =>
                {
                    b.Property<Guid>("TradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BalanceQty")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("PortfolioName")
                        .HasColumnType("nVarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<string>("ScriptName")
                        .HasColumnType("nVarchar(500)");

                    b.Property<DateTime>("TradeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradeType")
                        .HasColumnType("nVarchar(100)");

                    b.HasKey("TradeId");

                    b.ToTable("AppTrades");
                });

            modelBuilder.Entity("SmartTrader.Core.Models.WatchList", b =>
                {
                    b.Property<int>("WatchListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ChangeSinceAdded")
                        .HasColumnType("float");

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("Varchar(500)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ReasonToWatch")
                        .HasColumnType("Varchar(1000)");

                    b.Property<string>("Status")
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("Symbol")
                        .HasColumnType("Varchar(500)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("WatchListId");

                    b.ToTable("WatchList");
                });

            modelBuilder.Entity("SmartTrader.Core.Models.StockPrice", b =>
                {
                    b.HasOne("SmartTrader.Core.Models.Symbol", "Symbol")
                        .WithMany("StockPrices")
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("SmartTrader.Core.Models.Symbol", b =>
                {
                    b.Navigation("StockPrices");
                });
#pragma warning restore 612, 618
        }
    }
}
